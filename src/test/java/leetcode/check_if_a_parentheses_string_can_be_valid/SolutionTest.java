package leetcode.check_if_a_parentheses_string_can_be_valid;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

class SolutionTest {

	@Test
	void canBeValid() {
		Solution sol = new Solution();
		assertTrue(sol.canBeValid("()", "11"));
		assertFalse(sol.canBeValid(
				"(()))()))(()((()()(((()))()()()()()())))()()(()())()(()((()()((()((((((()(()()(()()())(((((())((()))))()(((((((()()())()))())((((((()(())())()((())()()((())((((())(((())(())()()))(((()()())())))((()))))()()()((()))())(())(((()()((())(())(())())()((()))())(())()(()())((((()(((())((()()())(((()(((((()))()))))))(()((())())(())))))(())(((())()()(()))())())))(((())))()()))()())))))())()(()()))(())(()())))())()))((((())(()))()(((())())(()(()))()))((()(())()()))))())(()(((((()",
				"110001111001011100000100011110101000100110010010011001110010111111100111000100000000101111101001111111011101001110011001001100100001100000000010100010101101100000100001000110111000111110110010111011010010100011111101110011100010010001111001010001001000111101101111111011001000100111100110101000100011011001001100110011111111111100101000100111111100000100101101000101111101000011110001001011111010011010000100100000000011101011001110000110011000100001110101100101111111110100"));
		assertFalse(sol.canBeValid("())(()(()(())()())(())((())(()())((())))))(((((((())(()))))(",
		                           "100011110110011011010111100111011101111110000101001101001111"));
		assertTrue(sol.canBeValid("))()))", "010100"));
		assertTrue(sol.canBeValid("()()", "0000"));
		assertTrue(sol.canBeValid(")(", "00"));
		assertFalse(sol.canBeValid(")", "0"));
	}
}